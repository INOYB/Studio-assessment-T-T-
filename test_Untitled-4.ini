#include <stdio.h>
#include <stdlib.h>
#include <string.h>
/*
 * 这个程序实现了一个简化的文本编辑器，支持基本的文本输入、删除功能，并使用栈实现撤销和重做功能。
 * 
 * 基础功能:
 * 1. 使用两个栈储存信息，一个存储文本内容，另一个存储操作记录。
 * 2. 支持以下操作:
 *    1. 插入字符: 在当前光标位置插入一个字符。
 *    2. 删除字符: 删除当前光标位置的字符。
 *    3. 撤销: 撤销最近的一次操作。
 * 3. 编写函数，模拟文本编辑和撤销操作。
 * 4. 编写一个测试函数，验证多个示例输入的文本编辑和撤销过程。
 * 
 * 进阶功能:
 * 1. 支持多种编辑操作，例如复制、粘贴。
 * 2. 支持重做(redo)功能，允许用户恢复最近撤销的操作。(使用栈操作实现)
 * 3. 添加错误处理，例如操作非法的情况。(如删除空文本时的操作)。
 * 
 * 例子:
 * 输入操作序列:
 * 1. 插入字符'a'
 * 2. 插入字符'b'
 * 3. 插入字符'c'
 * 4. 删除字符
 * 5. 撤销
 * 6. 撤销
 * 
 * 输出:
 * 结果字符串: ab
 * 
 * 代码实现:
 * - 定义了一个栈结构体，用于存储文本内容和操作记录。
 * - 定义了一个文本编辑器结构体，包含三个栈：文本内容栈、操作记录栈和重做操作栈。
 * - 实现了栈的基本操作，包括初始化、判断是否为空、判断是否已满、压入元素和弹出元素。
 * - 实现了文本编辑器的基本操作，包括插入字符、删除字符、撤销操作和重做操作。
 * - 实现了一个测试函数，验证文本编辑器的功能。
 */

#define MAX_SIZE 100 // 定义栈的最大容量为100

// 定义栈结构体
typedef struct {
    char data[MAX_SIZE]; // 存储栈中的数据
    int top; // 栈顶指针
} Stack;

// 初始化栈
void initStack(Stack *s) {
    s->top = -1; // 栈顶指针初始化为-1，表示栈为空
}

// 判断栈是否已满
int isFull(Stack *s) {
    return s->top == MAX_SIZE - 1; // 如果栈顶指针等于最大容量减1，则栈满
}

// 判断栈是否为空
int isEmpty(Stack *s) {
    return s->top == -1; // 如果栈顶指针为-1，则栈为空
}

// 向栈中压入一个字符
void push(Stack *s, char value) {
    if (!isFull(s)) { // 如果栈未满
        s->data[++(s->top)] = value; // 栈顶指针加1后，将值压入栈中
    }
}

// 从栈中弹出一个字符
char pop(Stack *s) {
    if (!isEmpty(s)) { // 如果栈不为空
        return s->data[(s->top)--]; // 返回栈顶元素，并将栈顶指针减1
    }
    return '\0'; // 如果栈为空，返回空字符
}

// 获取栈顶元素
char peek(Stack *s) {
    if (!isEmpty(s)) { // 如果栈不为空
        return s->data[s->top]; // 返回栈顶元素
    }
    return '\0'; // 如果栈为空，返回空字符
}

// 定义文本编辑器结构体
typedef struct {
    Stack text; // 存储文本内容的栈
    Stack operations; // 存储操作记录的栈
    Stack redoStack; // 存储重做操作的栈
} TextEditor;

// 初始化文本编辑器
void initEditor(TextEditor *editor) {
    initStack(&editor->text); // 初始化文本内容栈
    initStack(&editor->operations); // 初始化操作记录栈
    initStack(&editor->redoStack); // 初始化重做操作栈
}

// 插入字符
void insertChar(TextEditor *editor, char c) {
    push(&editor->text, c); // 将字符压入文本内容栈
    push(&editor->operations, 'I'); // 将插入操作记录压入操作记录栈，'I'表示插入
    push(&editor->redoStack, '\0'); // 清空重做操作栈
}

// 复制字符
void copyChar(TextEditor *editor, char *buffer, int length) {
    if (length > 0 && length <= editor->text.top + 1) {
        strncpy(buffer, editor->text.data + editor->text.top + 1 - length, length);
        buffer[length] = '\0'; // 添加字符串结束符
    } else {
        buffer[0] = '\0'; // 如果长度非法，返回空字符串
    }
}

// 粘贴字符
void pasteChar(TextEditor *editor, const char *buffer) {
    while (*buffer) {
        insertChar(editor, *buffer++); // 插入每个字符
    }
}

// 删除字符
void deleteChar(TextEditor *editor) {
    if (!isEmpty(&editor->text)) { // 如果文本内容栈不为空
        char deletedChar = pop(&editor->text); // 弹出文本内容栈顶字符
        push(&editor->operations, 'D'); // 将删除操作记录压入操作记录栈，'D'表示删除
        push(&editor->redoStack, deletedChar); // 将删除的字符压入重做操作栈
    } else {
        printf("Error: Cannot delete from an empty text.\n"); // 错误处理：删除空文本时的操作
    }
}

// 撤销操作
void undo(TextEditor *editor) {
    if (!isEmpty(&editor->operations)) { // 如果操作记录栈不为空
        char lastOp = pop(&editor->operations); // 弹出操作记录栈顶操作
        if (lastOp == 'I') { // 如果是插入操作
            pop(&editor->text); // 弹出文本内容栈顶字符
        } else if (lastOp == 'D') { // 如果是删除操作
            char lastDeletedChar = pop(&editor->redoStack); // 弹出重做操作栈顶字符
            push(&editor->text, lastDeletedChar); // 将字符压入文本内容栈
        }
    }
}


// 重做操作
void redo(TextEditor *editor) {
    if (!isEmpty(&editor->redoStack)) { // 如果重做操作栈不为空
        char lastRedoChar = pop(&editor->redoStack); // 弹出重做操作栈顶字符
        if (lastRedoChar != '\0') { // 如果字符不为空
            push(&editor->text, lastRedoChar); // 将字符压入文本内容栈
            push(&editor->operations, 'I'); // 将插入操作记录压入操作记录栈，'I'表示插入
        }
    }
}

// 打印文本内容
void printText(TextEditor *editor) {
    for (int i = 0; i <= editor->text.top; i++) { // 遍历文本内容栈
        printf("%c", editor->text.data[i]); // 打印每个字符
    }
    printf("\n"); // 换行
}

// 测试文本编辑器功能
void testEditor() {
    TextEditor editor; // 定义文本编辑器实例
    initEditor(&editor); // 初始化文本编辑器

    insertChar(&editor, 'a'); // 插入字符'a'
    insertChar(&editor, 'b'); // 插入字符'b'
    insertChar(&editor, 'c'); // 插入字符'c'
    deleteChar(&editor); // 删除字符
    undo(&editor); // 撤销操作
    undo(&editor); // 撤销操作

    printf("Resulting text: "); // 打印结果文本
    printText(&editor); // 打印文本内容，预期输出: "ab"
}

int main() {
    testEditor(); // 调用测试函数
    return 0; // 程序结束
}